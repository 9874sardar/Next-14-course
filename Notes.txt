//********************************************************************//

            THIS IS A NOTES MADE BY SARDAR TARIQ AZIZ .

            FOR MY PERSONAL USE ACCORDING TO MY UNDERSTANDING

//********************************************************************//

Features in Next js - 
    routing
    API routing
    Rendering
    Data fetching
    Styling
    Optimization
    Dev and Production

//********************************************************************//

 1 . No, Next. js is not the same as React. Next. js is a framework built on top of React.


(Notes from - https://www.freecodecamp.org/news/next-vs-react/)
-> Key points in Next Js- 

    Everything we can do in React we can also do in Next.js – with some additional 
    features like routing, API calls, authentication, and more. We don’t have 
    these features in React. Instead, we have to install some external libraries 
    and dependencies – like React Router for routing in a single page

    Next.js also uses something called server-side rendering

(basic defination for UNDERSTANDING)
Client Side rendering -    
        client is what we see on the screen – the user interface. 
        That is the client, what we can see. In other words, it's the 
        front-end part of the code.

Client Side Rendering - 
        the application loads and it generates the output on the browser 
        dynamically. In other words, the browser renders pages using JavaScript.

    **** 
    Sooo , Basically Server Side Rendering, the user interface that we see on the 
    screen is not generated by the browser, but on the server. When an application 
    loads, it does not need to parse the user interface on the browser. Instead 
    it comes from the server side, that has been generated in advance in the 
    server.

//********************************************************************//

    What is Pre-Rendering?

    Pre-rendering is an example of server-side rendering where the content is generated in 
    advance, before loading the app or the website on the browser.

//********************************************************************//

"scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  }

  we use the scripts follows for the following reasons 

    dev -  to start the app in development mode
    build - to build the app for Production usage
    start - to start the app Production server 
    lint - to use the next eslint build in fucntions

//********************************************************************//

 Their are some configration files - 

    next.config.js - for all the configration of next js
    tsconfig.json - for all configration of typescipr configration
    eslintrc.json - for eslint
    tailwind.cnfig && postcss.config = for tailwind css 

//********************************************************************//

    Follow in next js - 

    when we hit npm run dev the follow transfers to -> layout.tsx
    then inside -> RootLayout function. the props will always refer to childern components 
    to the ->page.tsx in the app folder . 
    Page is the home components which is rendered in the browser

//********************************************************************//

    package-lock.json = it ensures consistent installation of
                        our dependencies throughout the project

//********************************************************************//

    React Server components (RSC)
        it was introduced in react 18 version which was embraced by the next.js

        The architecture introduce a new way to create React components by splitting
        them into two types -
            Server components
            Client components

        in next js 
        Server components - 
            - in next js all components are server components by default
            - ability to read files or fetch data from db
            - however it doesnt have the ability to use hooks or handle userInteractions

        Client components - 
            - to make a client components we need to add "use client" at the top of the files
            - Client components can't perform tast like reading files but it has the ability to use hooks and manage interactions 

//********************************************************************//

